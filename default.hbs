<!doctype html>
<html class="no-js" lang="en" data-user-color-scheme="light">
	<head>
		{{!-- Document Settings --}}
		<meta charset="utf-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		{{!-- dark-mode --}}
		<script>
		// =====================
		// https://hankchizljaw.com/wrote/create-a-user-controlled-dark-or-light-mode/
		// =====================
		var user_color_scheme = localStorage.getItem('user-color-scheme');
		function initial_mode_set(mode) {
		if (mode) {
		document.documentElement.setAttribute('data-user-color-scheme', mode);
		}
		}
		initial_mode_set(user_color_scheme);
		window.addEventListener('DOMContentLoaded', (event) => {
		document.documentElement.classList.remove('no-js');
		var STORAGE_KEY = 'user-color-scheme';
		var COLOR_MODE_KEY = '--color-mode';
		var modeToggleButton = document.querySelector('.js-mode-toggle');
		//var modeToggleText = document.querySelector('.js-mode-toggle-text');
		var modeStatusElement = document.querySelector('.js-mode-status');
		
		var getCSSCustomProp = function getCSSCustomProp(propKey) {
		var response = getComputedStyle(document.documentElement).getPropertyValue(propKey);
		if (response.length) {
		response = response.replace(/\"/g, '').trim();
		}
		return response;
		};
		var applySetting = function applySetting(passedSetting) {
		var currentSetting = passedSetting || localStorage.getItem(STORAGE_KEY);
		if (currentSetting) {
		document.documentElement.setAttribute('data-user-color-scheme', currentSetting);
		//        setButtonLabelAndStatus(currentSetting);
		}
		//	  else {
		//        setButtonLabelAndStatus(getCSSCustomProp(COLOR_MODE_KEY));
		//      }
		};
		/*
		var setButtonLabelAndStatus = function setButtonLabelAndStatus(currentSetting) {
		modeToggleText.innerText =  "Enable ".concat(currentSetting === 'dark' ? 'light' : 'dark', " mode");
		};
		*/
		var toggleSetting = function toggleSetting() {
		var currentSetting = localStorage.getItem(STORAGE_KEY);
		switch (currentSetting) {
		case null:
		currentSetting = getCSSCustomProp(COLOR_MODE_KEY) === 'dark' ? 'light' : 'dark';
		break;
		case 'light':
		currentSetting = 'dark';
		break;
		case 'dark':
		currentSetting = 'light';
		break;
		}
		localStorage.setItem(STORAGE_KEY, currentSetting);
		return currentSetting;
		};
		modeToggleButton.addEventListener('click', function (evt) {
		evt.preventDefault();
		applySetting(toggleSetting());
		});
		applySetting();
		});
		</script>
		{{!-- Base Meta --}}
		<title>{{meta_title}}</title>
		<meta name="HandheldFriendly" content="True" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		{{!-- Styles'n'Scripts --}}
		<!-- Place favicon.ico and apple-touch-icon(s) in the root directory -->
		<link href="{{asset "css/typography.css"}}" rel='stylesheet' type='text/css'>
		<link rel="stylesheet" href="{{asset "css/styles.css"}}">
		{{ghost_head}}
		<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/styles/night-owl.min.css">
		<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js"></script>
		<script>hljs.initHighlightingOnLoad(); console.log('end hljs load');</script>
	</head>
	<body class="{{body_class}}">
		<!--[if lt IE 8]>
		<p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
		<![endif]-->
		<header class="site-header">
			<div>
				<a class="quote-header ir" href="#" aria-label="quote header">
					<div class="main-title"><label id="main-quote"></label></div>
					<div class="main-title" style="font-size: 20px;"><label id="main-quote-author"></label></div>
				</a>
			</div>
			<div class="user-toggle" alt="toggle dark mode">
				<div role="status" class="[ visually-hidden ][ js-mode-status ]"></div>
				<button class="[ toggle-button ] [ js-mode-toggle ]">
				<span class="toggle-button__icon" aria-hidden="true"></span>
				</button>
			</div>
			{{!-- <button class="c-nav__link c-color-mode-btn js-mode-toggle js-mode-toggle-title" title="Enable dark mode">
			<span class="u-hidden-visually js-mode-toggle-text">Enable dark mode</span>
			<span class="c-color-mode-btn__icon" aria-hidden="true"></span>
			</button> --}}
		</header>
		<div>
			{{#get "posts" limit="1" include="authors"}}
			{{#foreach posts}}
			{{> author}}
			{{/foreach}}
			{{/get}}
		</div>
		{{navigation}}
		{{{body}}}
		<footer class="main-footer">
			<div class="container clearfix">

<!-- modify this form HTML and place wherever you want your form -->

<form id="my-form"
  action="https://formspree.io/xlewkorz"
  method="POST">
	<center style="font-variant: none;">
        <label style="display: grid; align-items: baseline; text-align: center; font-size: small;" for="email-address">Join my newsletter</label>
  		<input type="email" name="email" id="email-address" style="height: 25px; width: 240px; display:inline; margin: 10px; color: #333;" placeholder=" Email address"/>     
  		<button style="display:inline !important;" class="btn" id="my-form-button">Subscribe</button>
  		<p id="my-form-status"></p>
	</center>
</form>

<!-- Place this script at the end of the body tag -->

<script>
  window.addEventListener("DOMContentLoaded", function() {

    // get the form elements defined in your form HTML above
    
    var form = document.getElementById("my-form");
    var button = document.getElementById("my-form-button");
    var status = document.getElementById("my-form-status");

    // Success and Error functions for after the form is submitted
    
    function success() {
      form.reset();
      button.style = "display: none ";
      status.innerHTML = "Thanks!";
    }

    function error() {
      status.innerHTML = "Oops! There was a problem.";
    }

    // handle the form submission event

    form.addEventListener("submit", function(ev) {
      ev.preventDefault();
      var data = new FormData(form);
      ajax(form.method, form.action, data, success, error);
    });
  });
  
  // helper function for sending an AJAX request

  function ajax(method, url, data, success, error) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    xhr.setRequestHeader("Accept", "application/json");
    xhr.onreadystatechange = function() {
      if (xhr.readyState !== XMLHttpRequest.DONE) return;
      if (xhr.status === 200) {
        success(xhr.response, xhr.responseType);
      } else {
        error(xhr.status, xhr.response, xhr.responseType);
      }
    };
    xhr.send(data);
  }
</script>

				<a class="icon-rss" href="{{@blog.url}}/rss/" title="RSS Feed"></a>
				<p>
					<a href="{{@blog.url}}" title="{{@blog.title}}">
						{{@blog.title}}&copy; <script>document.write(new Date().getFullYear())</script>
					</a>
				</p>
				<span class="icon-top" onclick="window.scrollTo(0, 0);">â–³</span>
			</div>
		</footer>
		{{ghost_foot}}
		<script src="{{asset "js/main.js"}}"></script>
		<script>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
		ga('create', 'UA-54526235-1', 'auto');
		ga('send', 'pageview');
		</script>
		<script>
		var images = document.querySelectorAll('.kg-gallery-image img');
		images.forEach(function (image) {
		var container = image.closest('.kg-gallery-image');
		var width = image.attributes.width.value;
		var height = image.attributes.height.value;
		var ratio = width / height;
		container.style.flex = ratio + ' 1 0%';
		})
		</script>
	</body>
</html>